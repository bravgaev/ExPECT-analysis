[
  {
    "objectID": "expect_classifiers.html",
    "href": "expect_classifiers.html",
    "title": "The Early Prediction of prEgnancy Complications Testing or ExPECT study",
    "section": "",
    "text": "This notebook contains the code for the creation of the machine learning classifiers of the ExPECT study. The code is kept separate mainly for readability and to keep the code in check.\n\n\nCode\n# Chunck containing the used libraries, colors and some utility functions \n\nset.seed(2341)\n\nlibrary(readxl)\nlibrary(limma)\nlibrary(bsseq)\nlibrary(RColorBrewer)\nlibrary(Rtsne)\nlibrary(pheatmap)\nlibrary(GenomicRanges)\nlibrary(biomaRt)\nlibrary(HDF5Array)\nlibrary(kableExtra)\nlibrary(patchwork)\nlibrary(ggrepel)\nlibrary(ggbeeswarm)\nlibrary(seqsetvis)\nlibrary(biomaRt)\nlibrary(fuzzyjoin)\nlibrary(ggpubr)\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(themis)\n\n\n#Plotting colors\nGreen &lt;- \"#00A08A\"\nOrange &lt;- \"#F98300\"\nBlue &lt;-  \"#5BBCD6\"\nPurple &lt;- \"#BF8AC2\"\nBrown &lt;- \"#B86D33\"\nOrange2 &lt;-  \"#CC9F68\"\nGreen2 &lt;- \"#7BB6AE\"\nBlue2 &lt;- \"#00778A\"\nPurple2 &lt;- \"#741078\"\n\ncolor_palette &lt;- c(Green, Orange, Blue, Purple, Brown, Green2, Purple2, Blue2, Orange2)\ngradient &lt;- colorRampPalette(c(Blue, \"#FFFFFF\", Purple))(1000)\n\n#\"not in\" operator\n`%nin%` = Negate(`%in%`)\n\n#Ranges to id funtction\nranges2id &lt;- function(genomicRanges) {\n    idVector &lt;- c(paste0(genomicRanges@seqnames, \":\", genomicRanges@ranges@start, \"-\", genomicRanges@ranges@start + genomicRanges@ranges@width - 1))\n}\n#Id to ranges function\nid2ranges &lt;- function(idVector) {\n    idTib &lt;- as_tibble(idVector) %&gt;% \n               separate(value, into = c(\"seqnames\", \"start\", \"end\"), sep = \"[:-]\", convert = T)\n        \n    genomicRanges &lt;- GRanges(seqnames =idTib$seqnames, ranges = IRanges(start = idTib$start, end = idTib$end))\n}\n\n#Limma model fitting and result gathering fucntion \ntrain_limma &lt;- function(matrix, design) {\n    limma_fit = lmFit(matrix, design = design)\n    eB_fit = eBayes(limma_fit)\n    categories &lt;- colnames(design)[-1]\n    results = list()\n    for (category in categories) {\n        top = topTable(eB_fit, coef = category, p.value = 0.01, \n                       number = Inf, adjust.method = \"BH\")\n        results[[category]] = top\n        \n    }\n    return(results)\n}\n\nplot_roc &lt;-  function(fit_prediction, fit_truth, fit_control, test_predictions, test_truth, test_control) {\n    fit_auc &lt;- roc_auc(fit_prediction, fit_truth, fit_control)\n    test_auc &lt;- roc_auc(test_predictions, test_truth, test_control)\n    \n    fit_roc &lt;- roc_curve(fit_prediction, fit_truth, fit_control)\n    test_roc &lt;- roc_curve(test_predictions, test_truth, test_control)\n    \n    ggplot(mapping = aes(x = 1 - specificity, y = sensitivity)) +\n    geom_path(data = fit_roc, color = color_palette[1], size = 1.5) +\n    geom_path(data = test_roc, color = color_palette[2], size = 1.5)+\n    geom_abline(lty = 3) +\n    geom_text(aes(x = 0.30, y = 0.80, label = paste0(\"AUC:\", round(fit_auc$.estimate, 4))), color = color_palette[1], size = 4) +\n    geom_text(aes(x = 0.80, y = 0.30, label = paste0(\"AUC:\", round(test_auc$.estimate, 4))), color = color_palette[2], size = 4) +\n    coord_equal() +\n    theme_classic()\n}\n\n#Set metric types to be collected\nsensPE &lt;- metric_tweak(\"sensPE\", sensitivity, event_level = \"second\")\nspecPE &lt;- metric_tweak(\"specPE\", specificity, event_level = \"second\")\ncls_metrics &lt;- metric_set(sensPE, specPE, accuracy)"
  },
  {
    "objectID": "expect_classifiers.html#random-forest-classifiers",
    "href": "expect_classifiers.html#random-forest-classifiers",
    "title": "The Early Prediction of prEgnancy Complications Testing or ExPECT study",
    "section": "Random forest classifiers",
    "text": "Random forest classifiers\nA random forest classifier from the ranger package is built. Hyperparameter training is first performed on the number of trees, number of randomly selected predictors and the minimal node size. More info on random forest classifiers can be found on Wikipedia.\n\nDiagnostic modelPredictive model\n\n\n\n\nCode\n#Set a sampling recipe for the symptomatic data\n\nsampling_rec &lt;- recipe(Category ~ ., data=sympt_train) %&gt;% step_rose(Category)\n\n#make a rf model\nrf_mod &lt;- rand_forest(trees = tune(), mtry = tune(), min_n = tune()) %&gt;% \n  set_engine(\"ranger\") %&gt;% \n  set_mode(\"classification\")\n\n#make a workflow for resampling\nrf_wf_sympt &lt;- workflow() %&gt;% \n  add_model(rf_mod) %&gt;% \n  add_recipe(sampling_rec) \n\n#Make a grid for a parameter search\nrf_grid &lt;- grid_regular(trees(), finalize(mtry(), x = sympt_folds), min_n(), levels = 5)\n\n#fit the resamplings\nsympt_rf_tune &lt;- rf_wf_sympt %&gt;% \n  tune_grid(resamples = sympt_folds, grid = rf_grid)\n\n#get the best model\nsympt_best_rf &lt;- sympt_rf_tune %&gt;% \n  select_best(metric = \"accuracy\")\n\n#make the final fit and evaluate the test set\nsympt_final_rf_wf &lt;- rf_wf_sympt %&gt;% \n  finalize_workflow(sympt_best_rf)\n\nsympt_rf_resample_fit &lt;- fit_resamples(sympt_final_rf_wf, resamples = sympt_folds, metrics = cls_metrics)\n\nsympt_final_rf_fit &lt;- sympt_final_rf_wf %&gt;% \n  last_fit(sympt_data_split)\n\n#Get metrics \nsympt_rf_metrics &lt;- sympt_final_rf_wf %&gt;% \n  last_fit(sympt_data_split, metrics = cls_metrics) %&gt;% collect_metrics()\n\n#Test the model on the pre-symptomatic data\n\nsympt_rf_fit &lt;- sympt_final_rf_wf %&gt;% fit(select(model_meth_sympt, -Sample_id))\npresympt_rf_predictions &lt;- predict(sympt_rf_fit, test_set_presympt, type =\"prob\") %&gt;% \n    bind_cols(Truth = test_set_presympt$Category)\n\nplot_roc(sympt_final_rf_fit$.predictions[[1]], \"Category\", \".pred_Control\",\n         presympt_rf_predictions, \"Truth\", \".pred_Control\")\n\n\n\n\n\n\n\n\n\nThe best performing random forest model has the following parameters\n\n\n\nmtry\ntrees\nmin_n\n\n\n\n\n1\n1000\n11\n\n\n\n\n\n\n\nCode\nsampling_rec_presympt &lt;-  recipe(Category ~ ., data=presympt_train_data) %&gt;% step_rose(Category)\n\nrf_wf_presympt &lt;- workflow() %&gt;% \n  add_model(rf_mod) %&gt;% \n  add_recipe(sampling_rec_presympt) \n\nrf_grid &lt;- grid_regular(trees(), finalize(mtry(), x = presympt_folds), min_n(), levels = 5)\n#fit the pre symptomatic resamplings\npresympt_rf_tune &lt;- rf_wf_presympt %&gt;% \n  tune_grid(resamples = presympt_folds, grid = rf_grid)\n\n#get the best model\npresympt_best_rf &lt;- presympt_rf_tune %&gt;% \n  select_best(metric = \"accuracy\")\n\n#make the final fit and evaluate the test set\npresympt_final_rf_wf &lt;- rf_wf_presympt %&gt;% \n  finalize_workflow(presympt_best_rf)\n\npresympt_rf_resample_fit &lt;- fit_resamples(presympt_final_rf_wf, resamples = presympt_folds, metrics = cls_metrics)\n\npresympt_final_rf_fit &lt;- presympt_final_rf_wf %&gt;% \n  last_fit(presympt_data_split)\n\n#Get metrics \npresympt_rf_metrics &lt;- presympt_final_rf_wf %&gt;% \n  last_fit(presympt_data_split, metrics = cls_metrics) %&gt;% collect_metrics()\n\n#Test the model on the symptomatic data\n\npresympt_rf_fit &lt;- presympt_final_rf_wf %&gt;% fit(select(model_meth_presympt, -Sample_id))\nsympt_rf_predictions &lt;- predict(presympt_rf_fit, test_set_sympt, type =\"prob\") %&gt;% \n    bind_cols(Truth = test_set_sympt$Category)\n\nplot_roc(presympt_final_rf_fit$.predictions[[1]], \"Category\", \".pred_Control\",\n         sympt_rf_predictions, \"Truth\", \".pred_Control\")\n\n\n\n\n\n\n\n\n\nThe best performing random forest model has the following parameters\n\n\n\nmtry\ntrees\nmin_n\n\n\n\n\n1\n500\n21"
  },
  {
    "objectID": "expect_classifiers.html#support-vector-machine",
    "href": "expect_classifiers.html#support-vector-machine",
    "title": "The Early Prediction of prEgnancy Complications Testing or ExPECT study",
    "section": "Support vector machine",
    "text": "Support vector machine\nFor the support vector machine, the kernlab-package is used set to classification mode. The only hyperparameter that is tuned is the cost parameter. More info on support vector machines can be read here\n\nDiagnostic modelPredictive model\n\n\n\n\nCode\n#Make an svm model\nsvm_mod &lt;- svm_linear(cost = tune()) %&gt;% \n  set_engine(\"kernlab\") %&gt;% \n  set_mode(\"classification\")\n\n#Make a workflow\nsvm_wf_sympt &lt;- workflow() %&gt;% \n  add_model(svm_mod) %&gt;% \n  add_recipe(sampling_rec)\n\n#Make a parameter grid\nsvm_grid &lt;- grid_regular(cost(), levels = 5)\n\n#Fit the resamples and do a grid search for symptomatic samples\nsvm_tune &lt;- svm_wf_sympt %&gt;% \n  tune_grid(resamples = sympt_folds, grid = svm_grid, metrics =  cls_metrics)\n\nsympt_best_svm &lt;- svm_tune %&gt;% \n  select_best(metric = \"accuracy\")\n\nsympt_final_svm_wf &lt;- svm_wf_sympt %&gt;% \n  finalize_workflow(sympt_best_svm)\n\nsympt_svm_resample_fit &lt;- fit_resamples(sympt_final_svm_wf, resamples = sympt_folds, metrics = cls_metrics)\n\nsympt_final_svm_fit &lt;- sympt_final_svm_wf %&gt;% \n  last_fit(sympt_data_split)\n\n#Get metrics \nsympt_svm_metrics &lt;- sympt_final_svm_wf %&gt;% \n  last_fit(sympt_data_split, metrics = cls_metrics) %&gt;% collect_metrics()\n\n#Test the model on the pre-symptomatic data\nsympt_svm_fit &lt;- sympt_final_svm_wf %&gt;% fit(select(model_meth_sympt, -Sample_id))\n\n\n Setting default kernel parameters  \n\n\nCode\npresympt_svm_predictions &lt;- predict(sympt_svm_fit, test_set_presympt, type =\"prob\") %&gt;% \n    bind_cols(Truth = test_set_presympt$Category)\n\nplot_roc(sympt_final_svm_fit$.predictions[[1]], \"Category\", \".pred_Control\",\n         presympt_svm_predictions, \"Truth\", \".pred_Control\")\n\n\n\n\n\n\n\n\n\nThe best performing support vector machine has the following parameters\n\n\n\ncost\n\n\n\n\n0.013139\n\n\n\n\n\n\n\nCode\nsvm_wf_presympt &lt;- workflow() %&gt;% \n  add_model(svm_mod) %&gt;% \n  add_recipe(sampling_rec_presympt)\n\n#Fit the resamples and do a grid search for symptomatic samples\npresympt_svm_tune &lt;- svm_wf_presympt %&gt;% \n  tune_grid(resamples = presympt_folds, grid = svm_grid, metrics =  cls_metrics)\n\npresympt_best_svm &lt;- svm_tune %&gt;% \n  select_best(metric = \"accuracy\")\n\npresympt_final_svm_wf &lt;- svm_wf_presympt %&gt;% \n  finalize_workflow(presympt_best_svm)\n\npresympt_svm_resample_fit &lt;- fit_resamples(presympt_final_svm_wf, resamples = presympt_folds, metrics = cls_metrics)\n\npresympt_final_svm_fit &lt;- presympt_final_svm_wf %&gt;% \n  last_fit(presympt_data_split)\n\n#Get metrics \npresympt_svm_metrics &lt;- presympt_final_svm_wf %&gt;% \n  last_fit(presympt_data_split, metrics = cls_metrics) %&gt;% collect_metrics()\n\n#Test the model on the symptomatic data\n\npresympt_svm_fit &lt;- presympt_final_svm_wf %&gt;% fit(select(model_meth_presympt, -Sample_id))\n\n\n Setting default kernel parameters  \n\n\nCode\nsympt_svm_predictions &lt;- predict(presympt_svm_fit, test_set_sympt, type =\"prob\") %&gt;% \n    bind_cols(Truth = test_set_sympt$Category)\n\nplot_roc(presympt_final_svm_fit$.predictions[[1]], \"Category\", \".pred_Control\",\n         sympt_svm_predictions, \"Truth\", \".pred_Control\")\n\n\n\n\n\n\n\n\n\nThe best performing support vector machine has the following parameters\n\n\n\ncost\n\n\n\n\n0.013139"
  },
  {
    "objectID": "expect_classifiers.html#regression-model",
    "href": "expect_classifiers.html#regression-model",
    "title": "The Early Prediction of prEgnancy Complications Testing or ExPECT study",
    "section": "Regression model",
    "text": "Regression model\nA logistic regression model is created with an elastic regularisation. The model family is set to binomial and the glmnet package is used for modelling. Both the model penalty and regularisation mixture are tuned during hyperparameter tuning. More about regression here\n\nDiagnostic modelPredictive model\n\n\n\n\nCode\n#Make an elestic net reggression model\nreg_mod &lt;- logistic_reg(penalty = tune(), mixture = tune()) %&gt;%\n  set_engine(\"glmnet\", family = \"binomial\") %&gt;%\n  set_mode(\"classification\")\n\n#Make workflow\nreg_wf_sympt &lt;- workflow() %&gt;%\n  add_model(reg_mod) %&gt;%\n add_recipe(sampling_rec)\n\n#Make a parameter grid\nreg_grid &lt;- grid_regular(penalty(), mixture(), levels = 5)\n\n#Tune the model\nsympt_reg_tune &lt;- reg_wf_sympt %&gt;%\n  tune_grid(resamples = sympt_folds, grid = reg_grid, metrics = cls_metrics)\n\nsympt_best_reg &lt;- sympt_reg_tune %&gt;%\n  select_best(metric = \"accuracy\")\n\nsympt_final_reg_wf &lt;- reg_wf_sympt %&gt;%\n  finalize_workflow(sympt_best_reg)\n\nsympt_reg_resample_fit &lt;- fit_resamples(sympt_final_reg_wf, resamples = sympt_folds, metrics = cls_metrics)\n\n\nsympt_final_reg_fit &lt;- sympt_final_reg_wf %&gt;%   \n  last_fit(sympt_data_split)\n\n#Get metrics \nsympt_reg_metrics &lt;- sympt_final_reg_wf %&gt;% \n  last_fit(sympt_data_split, metrics = cls_metrics) %&gt;% collect_metrics()\n\n#Test the model on the pre-symptomatic data\n\nsympt_reg_fit &lt;- sympt_final_reg_wf %&gt;% fit(select(model_meth_sympt, -Sample_id))\npresympt_reg_predictions &lt;- predict(sympt_reg_fit, test_set_presympt, type =\"prob\") %&gt;% \n    bind_cols(Truth = test_set_presympt$Category)\n\nplot_roc(sympt_final_reg_fit$.predictions[[1]], \"Category\", \".pred_Control\",\n         presympt_reg_predictions, \"Truth\", \".pred_Control\")\n\n\n\n\n\n\n\n\n\nThe best performing regression model has the following parameters\n\n\n\npenalty\nmixture\n\n\n\n\n1\n0\n\n\n\n\n\n\n\nCode\nreg_wf_presympt &lt;- workflow() %&gt;%\n  add_model(reg_mod) %&gt;%\n add_recipe(sampling_rec_presympt)\n\n#Tune the model\npresympt_reg_tune &lt;- reg_wf_presympt %&gt;%\n  tune_grid(resamples = presympt_folds, grid = reg_grid, metrics = cls_metrics)\n\npresympt_best_reg &lt;- presympt_reg_tune %&gt;%\n  select_best(metric = \"accuracy\")\n\npresympt_final_reg_wf &lt;- reg_wf_presympt %&gt;%\n  finalize_workflow(sympt_best_reg)\n\npresympt_reg_resample_fit &lt;- fit_resamples(presympt_final_reg_wf, resamples = presympt_folds, metrics = cls_metrics)\n\npresympt_final_reg_fit &lt;- presympt_final_reg_wf %&gt;%   \n  last_fit(presympt_data_split)\n\n#Get metrics \npresympt_reg_metrics &lt;- presympt_final_reg_wf %&gt;% \n  last_fit(presympt_data_split, metrics = cls_metrics) %&gt;% collect_metrics()\n\n#Test the model on the pre-symptomatic data\n\npresympt_reg_fit &lt;- presympt_final_reg_wf %&gt;% fit(select(model_meth_presympt, -Sample_id))\nsympt_reg_predictions &lt;- predict(presympt_reg_fit, test_set_sympt, type =\"prob\") %&gt;% \n    bind_cols(Truth = test_set_sympt$Category)\n\nplot_roc(presympt_final_reg_fit$.predictions[[1]], \"Category\", \".pred_Control\",\n         sympt_reg_predictions, \"Truth\", \".pred_Control\")\n\n\n\n\n\n\n\n\n\nThe best performing regression model has the following parameters\n\n\n\npenalty\nmixture\n\n\n\n\n0\n0\n\n\n\n\n\n\nThe following table contains specificity and sensitivity metrics for each of the create models (tested on their respective test set). Most models overclassify samples as controls, symptomatic models are more powerful at differentiating then pre-symptomatic models\n\n\nCode\ntotal_metrics &lt;- tibble(Model = c(\"Random forest\", \"Random forest\", \"Support Vector Machine\", \"Support Vector Machine\", \"Logistic regression\", \"Logistic regression\" ),\n                        Dataset = c(\"Symptomatic\", \"Pre-symptomatic\",\"Symptomatic\", \"Pre-symptomatic\",\"Symptomatic\", \"Pre-symptomatic\"),\n                        Sensitivity = c(\n                            sympt_rf_metrics$.estimate[1],\n                            presympt_rf_metrics$.estimate[1],\n                            sympt_svm_metrics$.estimate[1],\n                            presympt_svm_metrics$.estimate[1],\n                            sympt_reg_metrics$.estimate[1],\n                            presympt_reg_metrics$.estimate[1]\n                        ),\n                        Specificity = c(sympt_rf_metrics$.estimate[2],\n                            presympt_rf_metrics$.estimate[2],\n                            sympt_svm_metrics$.estimate[2],\n                            presympt_svm_metrics$.estimate[2],\n                            sympt_reg_metrics$.estimate[2],\n                            presympt_reg_metrics$.estimate[2]))\n\nkable(total_metrics)\n\n\n\n\n\nModel\nDataset\nSensitivity\nSpecificity\n\n\n\n\nRandom forest\nSymptomatic\n0.5714286\n1.0000000\n\n\nRandom forest\nPre-symptomatic\n0.1428571\n0.9629630\n\n\nSupport Vector Machine\nSymptomatic\n0.5714286\n1.0000000\n\n\nSupport Vector Machine\nPre-symptomatic\n0.2857143\n0.8888889\n\n\nLogistic regression\nSymptomatic\n0.8571429\n0.6153846\n\n\nLogistic regression\nPre-symptomatic\n0.5714286\n0.8888889"
  },
  {
    "objectID": "expect_main.html",
    "href": "expect_main.html",
    "title": "Early identification of high-risk pregnancies to develop preeclampsia through non-invasive cell-free DNA methylation profiling",
    "section": "",
    "text": "This notebook contains the code used to generate the results and plots of the ExPECT study. The code is fully reproducable using the data from the github repo. You can navigate through this page by using the bar on the left side. Code chunks are collapsed by default. To look at the code that generated a certain figure, click on the greyed out Code titles. Like the one below this text, that chunk contains all packages and some helper functions/utilities that were used.\n\n\nCode\n# Chunck containing the used libraries, colors and some utility functions \n\nset.seed(2341)\n\nlibrary(readxl)\nlibrary(limma)\nlibrary(bsseq)\nlibrary(RColorBrewer)\nlibrary(Rtsne)\nlibrary(pheatmap)\nlibrary(GenomicRanges)\nlibrary(biomaRt)\nlibrary(HDF5Array)\nlibrary(irlba)\nlibrary(kableExtra)\nlibrary(patchwork)\nlibrary(ggrepel)\nlibrary(ggbeeswarm)\nlibrary(seqsetvis)\nlibrary(biomaRt)\nlibrary(fuzzyjoin)\nlibrary(DSS)\nlibrary(ggpubr)\nlibrary(annotatr)\nlibrary(tidyverse)\n\n\n#Plotting colors\nGreen &lt;- \"#00A08A\"\nOrange &lt;- \"#F98300\"\nBlue &lt;-  \"#5BBCD6\"\nPurple &lt;- \"#BF8AC2\"\nBrown &lt;- \"#B86D33\"\nOrange2 &lt;-  \"#CC9F68\"\nGreen2 &lt;- \"#7BB6AE\"\nBlue2 &lt;- \"#00778A\"\nPurple2 &lt;- \"#741078\"\n\ncolor_palette &lt;- c(Green, Orange, Blue, Purple, Brown, Green2, Purple2, Blue2, Orange2)\ngradient &lt;- colorRampPalette(c(Blue, \"#FFFFFF\", Purple))(1000)\n\n#\"not in\" operator\n`%nin%` = Negate(`%in%`)\n\n#Ranges to id funtction\nranges2id &lt;- function(genomicRanges) {\n    idVector &lt;- c(paste0(genomicRanges@seqnames, \":\", genomicRanges@ranges@start, \"-\", genomicRanges@ranges@start + genomicRanges@ranges@width - 1))\n}\n#Id to ranges function\nid2ranges &lt;- function(idVector) {\n    idTib &lt;- as_tibble(idVector) %&gt;% \n               separate(value, into = c(\"seqnames\", \"start\", \"end\"), sep = \"[:-]\", convert = T)\n        \n    genomicRanges &lt;- GRanges(seqnames =idTib$seqnames, ranges = IRanges(start = idTib$start, end = idTib$end))\n}\n\n#Heatmapping function \n#Every row of the input matrix should contain data for one sample. \n#Sample ids should be included as rownames that are also used in the annotation dataframe\nmeth_heatmap &lt;- function(matrix, annotation, filename = NA, \n                         gradient = colorRampPalette(c(Blue, \"#FFFFFF\", Purple))(1000),\n                         colors = color_palette,\n                         show_names = F, height = 15) {\n    \n    #Make pheatmap color annotation\n    annotation_color_list = list()\n    for (column in colnames(annotation)) {\n        tmp_column = dplyr::select(annotation, all_of(column)) %&gt;% \n            mutate(across(everything(), as.factor))\n        if (length(levels(tmp_column[[1]])) &gt; 9) {\n            column_annotation = colorRampPalette(c(\"#FFFFFF\", \"#BF65C2\"))(1000)\n        } else {\n        column_annotation = setNames(colors[1:length(levels(tmp_column[,1]))],\n                                     levels(tmp_column[,1]))\n        }\n        annotation_color_list[[column]] = column_annotation\n    }\n    \n\n    \n    #Generate the heatmap figure\n    heatmap = pheatmap(matrix,\n                      color = gradient,\n                      annotation_row = annotation,\n                      annotation_colors = annotation_color_list,\n                      show_colnames = FALSE,\n                      border_color = NA,\n                      show_rownames = show_names,\n                      filename = filename,\n                      clustering_distance_rows = \"correlation\",\n                      height = height)\n    return(heatmap)\n}\n\n#Limma model fitting and result gathering fucntion \ntrain_limma &lt;- function(matrix, design) {\n    limma_fit = lmFit(matrix, design = design)\n    eB_fit = eBayes(limma_fit)\n    categories &lt;- colnames(design)[-1]\n    results = list()\n    for (category in categories) {\n        top = topTable(eB_fit, coef = category, p.value = 0.01, \n                       number = Inf, adjust.method = \"BH\")\n        results[[category]] = top\n        \n    }\n    return(results)\n}"
  },
  {
    "objectID": "expect_main.html#comparison-of-genome-wide-methylation-levels",
    "href": "expect_main.html#comparison-of-genome-wide-methylation-levels",
    "title": "Early identification of high-risk pregnancies to develop preeclampsia through non-invasive cell-free DNA methylation profiling",
    "section": "Comparison of genome-wide methylation levels",
    "text": "Comparison of genome-wide methylation levels\nGenome-wide average methylation is compared between cases and controls for the pre-symptomatic and symptomatic cohorts. Both on an intra- and inter-cohort level.\n\n\nCode\n#Compute mean methylation data for the Pre-symptomatic group\nmean_meth_presympt &lt;- apply(clusters_presympt, 2, mean) %&gt;% \n    as_tibble() %&gt;% \n    mutate(Sample_id = colnames(clusters_presympt)) %&gt;% \n    left_join(presympt_annotation) \n\n#Compare the means of this group with a Wilcox Rank Sum test   \npresympt_mean_test &lt;- wilcox.test(mean_meth_presympt$value[mean_meth_presympt$Category == \"PE\"], mean_meth_presympt$value[mean_meth_presympt$Category == \"Control\"], conf.int = T)\n\n#Compute mean methylation data for the Symptomatic group    \nmean_meth_sympt &lt;- apply(clusters_sympt, 2, mean) %&gt;% \n    as_tibble() %&gt;% \n    mutate(Sample_id = colnames(clusters_sympt)) %&gt;% \n    right_join(sympt_annotation) %&gt;% \n    mutate(Group = \"Symptomatic\")\n\n#Compare the means of this group with a Wilcox Rank Sum test \nsympt_mean_test &lt;- wilcox.test(mean_meth_sympt$value[mean_meth_sympt$Category == \"PE\"], mean_meth_sympt$value[mean_meth_sympt$Category == \"Control\"], conf.int = T)\n\n#Combine both tibbles for plotting an overview\nmean_meth_combined &lt;- bind_rows(mean_meth_presympt, mean_meth_sympt) %&gt;% \n    mutate(Category = paste(Group, Category))\n\n#Create a boxplot\nggplot(mean_meth_combined, aes(Category, value)) +\n    geom_boxplot() +\n    geom_beeswarm(aes(color = Category), stroke = 1, shape = 1) +\n    stat_compare_means(comparisons = list(c(\"Pre-symptomatic Control\", \"Pre-symptomatic PE\"),c(\"Symptomatic Control\", \"Symptomatic PE\"),c(\"Pre-symptomatic Control\", \"Symptomatic Control\"), c(\"Pre-symptomatic PE\", \"Symptomatic PE\") ))+\n    scale_color_manual(values = color_palette) + \n    ylab(\"Mean genome wide methylation level\") +\n    xlab(\"\")+\n    guides(color = F)+\n    theme_classic()\n\n\n\n\n\nGeneral decrease in methylation during pregnancy, with a significant genome-wide hypomethylation in preeclampsia patients near late pregnancy.\n\n\n\n\nBox-plots showing the mean genomic methylation level of controls and preeclampsia cases (PE). Methylation levels from presymptomatic samples, sampled between 11 and 20 weeks of gestation, show no significant difference. Methylation levels between cases and controls sampled after 20 weeks of gestation show a significantly lower methylation level of cases compared to controls. Significant methylation differences between pre-symptomatic and symptomatic groups can be observed for both preeclampsia cases and controls."
  },
  {
    "objectID": "expect_main.html#pre-symptomatic-dmrs",
    "href": "expect_main.html#pre-symptomatic-dmrs",
    "title": "Early identification of high-risk pregnancies to develop preeclampsia through non-invasive cell-free DNA methylation profiling",
    "section": "Pre-symptomatic DMR’s",
    "text": "Pre-symptomatic DMR’s\nAs finding significant DMR’s in the pre-symptomatic cohort proved unsuccesfull with the ad hoc clustering method, a second approach using DMRfinder is tried. This approach yields a set of significant DMR’s for the early sampling period.\n\n\nCode\n#Prepare presymtomatic methylation data, filter out low coverage sites\nbs_presympt &lt;- bs_expect[,presympt_annotation$Sample_id]\n\npData(bs_presympt) &lt;- pData(bs_presympt) %&gt;% as_tibble(rownames = NA) %&gt;% \n    rownames_to_column(var = \"Sample_id\") %&gt;% \n    left_join(presympt_annotation)\nrownames(pData(bs_presympt)) &lt;- bs_presympt$Sample_id\n\n\ncov_presympt &lt;- getCoverage(bs_presympt, type = \"Cov\", what = \"perBase\")\nkeep &lt;- which(rowSums(cov_presympt[,bs_presympt$Category == \"Control\"] &gt;= 2) &gt;= 2 &\n                rowSums(cov_presympt[,bs_presympt$Category == \"PE\"] &gt;= 2) &gt;= 2)\nbs_presympt_filtered &lt;- bs_presympt[keep,]\n\npe_ids &lt;- rownames(pData(bs_presympt_filtered)[bs_presympt_filtered$Category == \"PE\",])\ncontrol_ids &lt;- rownames(pData(bs_presympt_filtered)[bs_presympt_filtered$Category == \"Control\",])\n\npresympt_t_stat &lt;- BSmooth.tstat(bs_presympt_filtered, \n                                 group1 = pe_ids,\n                                 group2 = control_ids,\n                                 estimate.var = \"group2\",\n                                 local.correct = T,\n                                 verbose = T)\ndmr_presympt_finder &lt;- dmrFinder(presympt_t_stat, qcutoff = c(0.01, 0.99))\ndmr_presympt_finder_filtered &lt;- subset(dmr_presympt_finder, n &gt;= 3 & abs(meanDiff) &gt;= 0.1)\n\npresympt_heatmap_annot  &lt;- presympt_annotation %&gt;% column_to_rownames(var = \"Sample_id\") %&gt;% \n    dplyr::select(Category, Sex, Aspirin) %&gt;% \n    mutate(across(Category:Aspirin, as.factor))\n\nheatmap_data_finder &lt;- getMeth(bs_presympt_filtered, type = \"smooth\", what = \"perRegion\", regions = dmr_presympt_finder_filtered)\ncolnames(heatmap_data_finder) &lt;- pData(bs_presympt_filtered)$Sample_id\n\n\n\nClustering\nHeatmap plots are made to show the significance of the discovered DMR’s, switch between the amount of DMR’s used to generate the heatmap by using the tabset. The rows of the heatmaps represent samples, while columns represent the DMR’s. Methylation values are shown on a gradient from blue to white to purple (with blue hues being &lt;50% methylated regions and purple hues meaning &gt;50% methylated regions)\n\nTop 500Top 250Top 100\n\n\n\n\nCode\np_dmrfinder500_heatmap &lt;- meth_heatmap(t(heatmap_data_finder[1:500,]), presympt_heatmap_annot)\n\n\n\n\n\n\n\n\nFigure 3\n\n\n\n\n\n\n\n\n\nCode\np_dmrfinder250_heatmap &lt;- meth_heatmap(t(heatmap_data_finder[1:250,]), presympt_heatmap_annot,file = \"Plots/presympt250_heatmap.png\", height = 5)\n\n\n\n\n\n\nCode\np_dmrfinder100_heatmap &lt;- meth_heatmap(t(heatmap_data_finder[1:100,]), presympt_heatmap_annot)\n\n\n\n\n\n\n\n\nFigure 4"
  },
  {
    "objectID": "expect_main.html#overlap",
    "href": "expect_main.html#overlap",
    "title": "Early identification of high-risk pregnancies to develop preeclampsia through non-invasive cell-free DNA methylation profiling",
    "section": "Overlap",
    "text": "Overlap\nDMR’s are compared between the pre-symptomatic and symptomatic cohort. But only a small overlap in DMR’s is found.\n\n\nCode\npresympt_dmr_ranges &lt;- GRanges(seqnames = dmr_presympt_finder_filtered$chr, range = IRanges(start = dmr_presympt_finder_filtered$start, end = dmr_presympt_finder_filtered$end))\nsympt_dmr_ranges &lt;- id2ranges(dmrs_sympt_limma)\n\noverlap_dmrs &lt;- subsetByOverlaps(presympt_dmr_ranges, sympt_dmr_ranges)\n\nssvFeatureVenn(list(presympt_dmr_ranges,sympt_dmr_ranges), group_names = c(\"Pre-symptomatic cohort\", \"Symptomatic cohort\"), counts_txt_size = 21)\n\n\n\n\n\nOnly limited overlap is present in DMR’s between early and late samples"
  },
  {
    "objectID": "expect_main.html#go-analysis",
    "href": "expect_main.html#go-analysis",
    "title": "Early identification of high-risk pregnancies to develop preeclampsia through non-invasive cell-free DNA methylation profiling",
    "section": "GO analysis",
    "text": "GO analysis\nTo explore enriched GO terms the goana package is used to perform a gene ontology analysis on the discovered DMR’s. This is done three separate times, once on the genes in the presymptomatic set of DMR’s, once on the genes in the symptomatic set of DMR’s and a final time on the set of overlapping genes that are present in both sets of DMR’s.\n\n\n\nTable 1: Top GO terms in the overlapping DMR’s\n\n\n\nCode\nmart &lt;- useEnsembl(\"ensembl\", mirror = \"useast\")\nmart &lt;- useDataset(\"hsapiens_gene_ensembl\", mart)\nattributes &lt;- c(\"ensembl_gene_id\",\"hgnc_symbol\", \"description\", \"chromosome_name\", \"start_position\", \"end_position\", \"strand\", \"entrezgene_id\")\nfilters &lt;- c(\"chromosomal_region\")\n\ndmr_presympt_finder_filtered &lt;- dmr_presympt_finder_filtered %&gt;% \n    mutate(chromosomal_region=paste0(chr,\":\",start, \":\", end))\n\ndmr_sympt_limma$CategoryPE &lt;- dmr_sympt_limma$CategoryPE %&gt;% filter(abs(logFC) &gt; 0.1) %&gt;% \n    rownames_to_column(var = \"chromosomal_region\") %&gt;% \n    mutate(chromosomal_region = str_replace(chromosomal_region, \"-\", \":\")) %&gt;% \n    separate(chromosomal_region, into = c(\"chromosome_name\", \"start_position\", \"end_position\"), sep = \":\", convert = T, remove = F)\n\ngenes_presympt_finder &lt;- getBM(attributes = attributes, filters = filters, values = dmr_presympt_finder_filtered$chromosomal_region, mart = mart)\ngenes_sympt_limma &lt;- getBM(attributes = attributes, filters = filters, values = dmr_sympt_limma$CategoryPE$chromosomal_region, mart = mart)\n\n#Perform GO analysis\nGO_presympt &lt;- goana(genes_presympt_finder$entrezgene_id, FDR = 0.05)\nGO_sympt &lt;- goana(genes_sympt_limma$entrezgene_id, FDR = 0.05)\n\n\nunique_presympt &lt;- genes_presympt_finder[genes_presympt_finder$ensembl_gene_id %nin% genes_sympt_limma$ensembl_gene_id,]\nunique_sympt &lt;- genes_sympt_limma[genes_sympt_limma$ensembl_gene_id %nin% genes_presympt_finder$ensembl_gene_id,]\noverlap_genes &lt;- genes_presympt_finder[genes_presympt_finder$ensembl_gene_id %in% genes_sympt_limma$ensembl_gene_id,]\n\nGO_overlap &lt;- goana(overlap_genes$entrezgene_id, FDR = 0.05)\n\n\n\n\n\nPresymptomaticSymptomaticOverlap\n\n\n\n\nCode\nkable(topGO(GO_presympt))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTerm\nOnt\nN\nDE\nP.DE\n\n\n\n\nGO:0005622\nintracellular anatomical structure\nCC\n15487\n682\n0.00e+00\n\n\nGO:0005737\ncytoplasm\nCC\n12122\n560\n0.00e+00\n\n\nGO:0043226\norganelle\nCC\n14777\n642\n0.00e+00\n\n\nGO:0005488\nbinding\nMF\n16707\n704\n0.00e+00\n\n\nGO:0003674\nmolecular_function\nMF\n18496\n756\n0.00e+00\n\n\nGO:0043229\nintracellular organelle\nCC\n13828\n609\n0.00e+00\n\n\nGO:0005515\nprotein binding\nMF\n14048\n611\n0.00e+00\n\n\nGO:0043227\nmembrane-bounded organelle\nCC\n13906\n598\n1.00e-07\n\n\nGO:0003824\ncatalytic activity\nMF\n5582\n275\n5.00e-07\n\n\nGO:0097159\norganic cyclic compound binding\nMF\n6373\n305\n1.10e-06\n\n\nGO:1901363\nheterocyclic compound binding\nMF\n6301\n302\n1.20e-06\n\n\nGO:0005829\ncytosol\nCC\n5485\n268\n1.50e-06\n\n\nGO:0071840\ncellular component organization or biogenesis\nBP\n6747\n318\n2.40e-06\n\n\nGO:0110165\ncellular anatomical entity\nCC\n19485\n771\n3.10e-06\n\n\nGO:0016043\ncellular component organization\nBP\n6536\n308\n4.10e-06\n\n\nGO:0043231\nintracellular membrane-bounded organelle\nCC\n12680\n543\n5.00e-06\n\n\nGO:0043168\nanion binding\nMF\n2421\n134\n5.10e-06\n\n\nGO:0044238\nprimary metabolic process\nBP\n10643\n467\n5.60e-06\n\n\nGO:0036094\nsmall molecule binding\nMF\n2550\n138\n1.15e-05\n\n\nGO:1990391\nDNA repair complex\nCC\n22\n7\n1.18e-05\n\n\n\n\n\n\n\n\n\nCode\nkable(topGO(GO_sympt))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTerm\nOnt\nN\nDE\nP.DE\n\n\n\n\nGO:0003674\nmolecular_function\nMF\n18496\n4115\n0\n\n\nGO:0005515\nprotein binding\nMF\n14048\n3332\n0\n\n\nGO:0005488\nbinding\nMF\n16707\n3813\n0\n\n\nGO:0005737\ncytoplasm\nCC\n12122\n2933\n0\n\n\nGO:0005622\nintracellular anatomical structure\nCC\n15487\n3548\n0\n\n\nGO:0016043\ncellular component organization\nBP\n6536\n1704\n0\n\n\nGO:0043167\nion binding\nMF\n6071\n1597\n0\n\n\nGO:0071840\ncellular component organization or biogenesis\nBP\n6747\n1740\n0\n\n\nGO:0043226\norganelle\nCC\n14777\n3377\n0\n\n\nGO:0043229\nintracellular organelle\nCC\n13828\n3192\n0\n\n\nGO:0030030\ncell projection organization\nBP\n1595\n519\n0\n\n\nGO:0120036\nplasma membrane bounded cell projection organization\nBP\n1555\n506\n0\n\n\nGO:0051179\nlocalization\nBP\n5320\n1397\n0\n\n\nGO:0042995\ncell projection\nCC\n2374\n708\n0\n\n\nGO:0030054\ncell junction\nCC\n2202\n663\n0\n\n\nGO:0120025\nplasma membrane bounded cell projection\nCC\n2262\n675\n0\n\n\nGO:0005524\nATP binding\nMF\n1472\n465\n0\n\n\nGO:0030554\nadenyl nucleotide binding\nMF\n1635\n506\n0\n\n\nGO:0003824\ncatalytic activity\nMF\n5582\n1427\n0\n\n\nGO:0032559\nadenyl ribonucleotide binding\nMF\n1533\n480\n0\n\n\n\n\n\n\n\n\n\nCode\nkable(topGO(GO_overlap))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTerm\nOnt\nN\nDE\nP.DE\n\n\n\n\nGO:0005622\nintracellular anatomical structure\nCC\n15487\n245\n1.90e-06\n\n\nGO:0042995\ncell projection\nCC\n2374\n59\n4.10e-06\n\n\nGO:0015629\nactin cytoskeleton\nCC\n502\n21\n6.70e-06\n\n\nGO:0005829\ncytosol\nCC\n5485\n109\n7.40e-06\n\n\nGO:0120025\nplasma membrane bounded cell projection\nCC\n2262\n56\n8.60e-06\n\n\nGO:0120035\nregulation of plasma membrane bounded cell projection organization\nBP\n652\n24\n1.26e-05\n\n\nGO:0005737\ncytoplasm\nCC\n12122\n201\n1.35e-05\n\n\nGO:0031344\nregulation of cell projection organization\nBP\n668\n24\n1.88e-05\n\n\nGO:0048813\ndendrite morphogenesis\nBP\n139\n10\n2.28e-05\n\n\nGO:0030674\nprotein-macromolecule adaptor activity\nMF\n421\n18\n2.31e-05\n\n\nGO:0043226\norganelle\nCC\n14777\n233\n2.43e-05\n\n\nGO:0005856\ncytoskeleton\nCC\n2403\n57\n2.48e-05\n\n\nGO:0035556\nintracellular signal transduction\nBP\n2698\n62\n2.64e-05\n\n\nGO:0051128\nregulation of cellular component organization\nBP\n2451\n57\n4.35e-05\n\n\nGO:0042127\nregulation of cell population proliferation\nBP\n2291\n54\n5.05e-05\n\n\nGO:0008283\ncell population proliferation\nBP\n3323\n71\n6.53e-05\n\n\nGO:0060090\nmolecular adaptor activity\nMF\n587\n21\n6.70e-05\n\n\nGO:0044087\nregulation of cellular component biogenesis\nBP\n984\n29\n9.55e-05\n\n\nGO:0016358\ndendrite development\nBP\n233\n12\n9.69e-05\n\n\nGO:0043229\nintracellular organelle\nCC\n13828\n219\n9.74e-05"
  },
  {
    "objectID": "expect_main.html#genes-of-interest",
    "href": "expect_main.html#genes-of-interest",
    "title": "Early identification of high-risk pregnancies to develop preeclampsia through non-invasive cell-free DNA methylation profiling",
    "section": "Genes of interest",
    "text": "Genes of interest\n\n\nCode\nGOI &lt;- c(\"FLT1\", \"PIGF\", \"ENG\", \"VEGFA\", \"HIF1A\", \"PAPPA\")\n\n#Get gene annotation for clusters\nclusters_annotated &lt;- clusters_expect %&gt;% \n    rownames_to_column(var = \"chromosomal_region\") %&gt;% \n    mutate(chromosomal_region = str_replace(chromosomal_region, \"-\", \":\")) %&gt;% \n    separate(chromosomal_region, into = c(\"chromosome_name\", \"start_position\", \"end_position\"), sep = \":\", convert = T, remove = F)\n\ngenes_clusters &lt;- getBM(attributes = attributes, filters = filters, values = clusters_annotated$chromosomal_region, mart = mart)\n\n#Annotate genes of interest\nclusters_expect_annotated &lt;-  fuzzy_left_join(genes_clusters[genes_clusters$hgnc_symbol %in% GOI,], clusters_annotated, \n                                        by = c(\"chromosome_name\", \"start_position\", \"end_position\"), \n                                        match_fun=list(`==`, `&lt;=`, `&gt;=`))"
  },
  {
    "objectID": "expect_main.html#dmrs-in-the-longitudinal-cohort",
    "href": "expect_main.html#dmrs-in-the-longitudinal-cohort",
    "title": "Early identification of high-risk pregnancies to develop preeclampsia through non-invasive cell-free DNA methylation profiling",
    "section": "DMR’s in the longitudinal cohort",
    "text": "DMR’s in the longitudinal cohort\nDue to the small overlap between DMR’s calculated on the pre-symptomatic and symptomatic cohorts, we hypothesize that these DMR’s also undergo significant changes throughout the pregnancy duration. To investigate this groups of DMR’s are extracted from the hierarchical clusterings made in the heatmap figures of the DMR section. The average methylation of these groups is then investigated over time.\n\nSymptomatic DMR’sPre-symptomatic DMR’s\n\n\n\n\nCode\n#Get longitudinal cohort cluster methylation for symptomatic DMRs \nlong_sympt_dmr &lt;- clusters_long[str_replace(dmr_sympt_limma$CategoryPE$chromosomal_region, \"(?&lt;=[0-9][0-9][0-9]):(?=[0-9][0-9])\", \"-\") ,] %&gt;% t() %&gt;% \n    as_tibble() \ncolnames(long_sympt_dmr) &lt;- str_replace_all(paste0(\"region_\", colnames(long_sympt_dmr)), \"[-:]\", \"_\")    \nlong_sympt_dmr &lt;- long_sympt_dmr %&gt;%     \n    bind_cols(Sample_id = colnames(clusters_long)) %&gt;% \n    relocate(Sample_id) %&gt;% \n    full_join(long_annotation)\n\n#Get clusters used in previous heatmapfigure (look at top 250 DMRs)\nsympt_memb &lt;- cutree(p_dmr250_cluster_heatmap$tree_col, k = 4)\nnames(sympt_memb) &lt;- str_replace_all(paste0(\"region_\", names(sympt_memb)), \"[-:]\", \"_\")\n\n\nplot_regioncluster_long &lt;- function(dmr_methylation, sample_ids, annotation, region_clusters) {\n    for (i in unique(region_clusters)) {\n        plot_data &lt;- dmr_methylation %&gt;% select(any_of(names(region_clusters[region_clusters == i]))) %&gt;% as.matrix() %&gt;% \n            rowMeans2(na.rm = T) %&gt;% as_tibble() %&gt;% \n            bind_cols(Sample_id = sample_ids) %&gt;% \n            full_join(annotation)\n        \n        plot &lt;- ggplot(plot_data) +\n                geom_point(aes(Gest_age_weeks, value, color = Category)) +\n                geom_smooth(aes(Gest_age_weeks, value, color = Category, fill = Category)) +\n                scale_color_manual(values = color_palette, labels = c(\"Control\", \"Preeclampsia\"))+\n                scale_fill_manual(values = color_palette, labels = c(\"Control\", \"Preeclampsia\"))+\n                scale_y_continuous(limits = c(0,1)) +\n                xlab(\"Gestational age (weeks)\") +\n                ylab(\"Methylation value\") +\n                theme_classic() \n        if (exists(\"full_plot\")) { \n            full_plot &lt;- full_plot + plot\n        } else {\n            full_plot &lt;- plot\n        }\n    }\n    (full_plot + plot_layout(guides = \"collect\") + patchwork::plot_annotation(tag_levels = \"A\")) & theme(legend.position = 'bottom')\n  \n}\n\nplot_regioncluster_long(long_sympt_dmr, colnames(clusters_long), long_annotation, sympt_memb)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#Get longitudinal cohort cluster methylation for pre-symptomatic DMRs  \nbs_long &lt;- bs_expect[,long_annotation$Sample_id]\nlong_pre_dmr &lt;- suppressWarnings(getMeth(bs_long, regions = dmr_presympt_finder_filtered, what = \"perRegion\", type = \"smooth\"))\nrownames(long_pre_dmr) &lt;- paste(\"region\",dmr_presympt_finder_filtered$chr, dmr_presympt_finder_filtered$start, dmr_presympt_finder_filtered$end, sep = \"_\")\nlong_pre_dmr &lt;- t(long_pre_dmr) %&gt;% as_tibble(rownames = NA) \n\n#Get clusters used in previous heatmapfigure (look at top 250 DMRs)\npresympt_memb &lt;- cutree(p_dmrfinder250_heatmap$tree_col, k = 4)\nnames(presympt_memb) &lt;- str_replace_all(paste0(\"region_\", dmr_presympt_finder_filtered[1:250,]$chromosomal_region), \"[-:]\", \"_\")\n\nplot_regioncluster_long(long_pre_dmr, colnames(clusters_long), long_annotation, presympt_memb)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#Compute DMRs that are consistent in the longitudinal group\nlong_dmr_design &lt;- model.matrix(~ Category + Gest_age_weeks + Batch, long_annotation)\nlong_dmr &lt;- train_limma(clusters_long, long_dmr_design)\n\nheatmap_annot_long &lt;- long_annotation %&gt;% column_to_rownames(var = \"Sample_id\") %&gt;% \n    select(Category, Gest_age_weeks, Batch) %&gt;% \n    rename(`Gestational age (weeks)` = Gest_age_weeks)\nhm_data &lt;- t(clusters_long[rownames(long_dmr$CategoryPE),])\nmeth_heatmap(hm_data, annotation = heatmap_annot_long)\n\n\n\n\n\nA limited set of DMRs can differentiate most cases and controls in a gestational age independent manner\n\n\n\n\nA total of 73 DMR’s are found to be significant between cases and controls that are independent of the gestational age of the sample. These DMR’s arent able to fully make a destinction between cases and controls for all included samples."
  }
]